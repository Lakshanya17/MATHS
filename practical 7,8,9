#7 
import numpy as np

def check_linear_dependence(vectors):
    # Convert the list of vectors to a matrix
    matrix = np.column_stack(vectors)
    rank = np.linalg.matrix_rank(matrix)

    if rank < len(vectors):
        print("The vectors are linearly dependent.")
        return True
    else:
        print("The vectors are linearly independent.")
        return False

def generate_linear_combination(coefficients, vectors):
    # Multiply each vector by its coefficient and sum them up
    return np.sum([c * v for c, v in zip(coefficients, vectors)], axis=0)
    
#8-
import numpy as np

def gram_schmidt_orthogonalization(vectors):
    # Initialize the orthogonal and orthonormal bases
    orthogonal_basis = []
    orthonormal_basis = []

    for v in vectors:
        # Subtract the projections of v onto previous orthogonal vectors
        w = v - np.sum([np.dot(v, u) / np.dot(u, u) * u for u in orthogonal_basis], axis=0)
        orthogonal_basis.append(w)

        # Normalize the orthogonal vector to get the orthonormal vector
        norm = np.linalg.norm(w)
        if norm == 0:
            orthonormal_basis.append(np.zeros_like(w))
        else:
            orthonormal_basis.append(w / norm)

    return orthonormal_basis

#9-
import numpy as np

def is_diagonalizable(matrix):
    # Get the eigenvalues and eigenvectors of the matrix
    eigenvalues, eigenvectors = np.linalg.eig(matrix)

    # Check if the matrix is diagonalizable by checking if the dimension
    # of the eigenspace for each eigenvalue is equal to 1
    for eigenvalue in eigenvalues:
        if np.linalg.matrix_rank(matrix - eigenvalue * np.eye(matrix.shape[0])) > 1:
            print("The matrix is not diagonalizable.")
            return False

    print("The matrix is diagonalizable.")
    return True

def find_eigenvalues(matrix):
    eigenvalues, _ = np.linalg.eig(matrix)
    return eigenvalues
